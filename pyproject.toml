[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "chatbot_conversation"
description = "A chatbot conversation system"
# note need to update version number in version.py of src/chatbot_conversation
version = "1.0.0"
authors = [{name = "Brian Sentance", email = "brian@sentance.tech"}]
readme = "README.md"
requires-python = ">=3.10"
dependencies = [
    "anthropic==0.42.0",
    "google-generativeai==0.8.3",
    "google-api-core==2.24.1",
    "ollama==0.4.5",
    "openai==1.59.6",
    "pydantic==2.10.5",
    "python-dotenv==1.0.1",
    "rich==13.9.4",
    "tenacity==8.5.0",
    "httpx==0.0.27"
]

[project.scripts]
chatbot_conversation = "chatbot_conversation.main:main"

[project.optional-dependencies]
test = [
    "black==24.10.0",
    "isort==5.13.2",
    "mypy==1.11.2",
    "mypy-extensions==1.0.0",
    "pipreqs==0.5.0",
    "pylint==3.2.7",
    "pytest==7.4.4",
    "pytest-cov==6.0.0",
    "pytest-mock==3.14.0",
    "toml==0.10.2",
    "tomlcheck==0.2.3"
]

[tool.hatch.build.targets.wheel]
packages = ["src/chatbot_conversation"]

[tool.hatch.metadata]
root = "src"

[tool.pyright]
include = ["src"]
exclude = ["**/__pycache__", "src/experimental"]
defineConstant = { DEBUG = true }
reportMissingImports = true
reportMissingTypeStubs = false
pythonVersion = "3.10"
pythonPlatform = "All"

[[tool.pyright.overrides]]
path = "tests/**"
reportPrivateUsage = false

[tool.isort]
profile = "black"
multi_line_output = 3

[tool.black]
line-length = 100
target-version = ['py310']

[tool.pylint]

# Basic configuration options
max-line-length = 100
py-version = "3.10"
indent-string = "    "
min-similarity-lines = 4

# Require docstrings for modules, classes, methods, etc.
docstring-min-length = 10

# Class design checks
min-public-methods = 1
max-public-methods = 20
max-args = 6
max-attributes = 12

# Disable specific error checking
disable = [
    "W0511",  # fixme (allows TODOs)
]


[tool.mypy]
mypy_path = ["src"]
packages = ["chatbot_conversation"]
python_version = "3.10"
strict = true
ignore_missing_imports = true
explicit_package_bases = true
disallow_untyped_defs = true
check_untyped_defs = true
strict_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_return_any = true
warn_unreachable = true

[tool.pytest.ini_options]
pythonpath = [".", "src"]
testpaths = ["tests"]
python_files = ["test_*.py"]
addopts = "-v -s -m 'not live_api and not ollama'"
filterwarnings = [
    "ignore::DeprecationWarning",
    "ignore::UserWarning",
]
markers = [
    "live_api: marks tests as live API tests (deselect with '-m \"not live_api\"')",
    "ollama: marks tests that require Ollama (deselect with '-m \"not ollama\"')",
]